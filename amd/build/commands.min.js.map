{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_fontcolor plugin.\n *\n * @module      tiny_htmlblock\n * @copyright   2023 Stephan Robotta <stephan.robotta@bfh.ch>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {component} from './common';\nimport {get_string as getString} from 'core/str';\nimport {handleAction} from './ui';\nimport {getHtmlBlocks, getValidChildren} from \"./options\";\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        buttonText,\n        buttonImage,\n        menuText,\n    ] = await Promise.all([\n        getString('buttontext', component),\n        getButtonImage('icon', component),\n        getString('menutext', component)\n    ]);\n\n    return (editor) => {\n        // Check if we have any html blocks defined\n        if (getHtmlBlocks(editor).length === 0) {\n            return;\n        }\n\n        editor.options.set('valid_children', getValidChildren(editor));\n\n        // Register the Icon.\n        editor.ui.registry.addIcon(component, buttonImage.html);\n\n        // Register the Menu Button.\n        editor.ui.registry.addButton(component, {\n            icon: component,\n            tooltip: buttonText,\n            onAction: () => handleAction(editor),\n        });\n\n        // Add the menu item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(component, {\n            icon: component,\n            text: menuText,\n            onAction: () => handleAction(editor),\n        });\n    };\n};\n"],"names":["async","buttonText","buttonImage","menuText","Promise","all","component","editor","length","options","set","ui","registry","addIcon","html","addButton","icon","tooltip","onAction","addMenuItem","text"],"mappings":"kQAqCwBA,gBAEhBC,WACAC,YACAC,gBACMC,QAAQC,IAAI,EAClB,mBAAU,aAAcC,oBACxB,yBAAe,OAAQA,oBACvB,mBAAU,WAAYA,4BAGlBC,SAEiC,KAAjC,0BAAcA,QAAQC,SAI1BD,OAAOE,QAAQC,IAAI,kBAAkB,6BAAiBH,SAGtDA,OAAOI,GAAGC,SAASC,QAAQP,kBAAWJ,YAAYY,MAGlDP,OAAOI,GAAGC,SAASG,UAAUT,kBAAW,CACpCU,KAAMV,kBACNW,QAAShB,WACTiB,SAAU,KAAM,oBAAaX,UAKjCA,OAAOI,GAAGC,SAASO,YAAYb,kBAAW,CACtCU,KAAMV,kBACNc,KAAMjB,SACNe,SAAU,KAAM,oBAAaX"}